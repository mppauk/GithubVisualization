//dependency-check.bat --format JSON --out "C:\Users\mpauk\GithubData\Apache\helix"  --scan "C:\Users\mpauk\GithubData\GithubDataAnalysis\helix"
var VulnerabilityData;
function initializeVulnerabilityNetwork(response){
    VulnerabilityData = response;
    var vuln_options = {
        nodes: {
            shape: 'dot',
            borderWidth: 0,
            size: 30,
            font: {
                size: 32,
                color: '#ffffff'
            },
        },
        edges: {
            width: 5,
            length: 40,
        },
        physics: {
            barnesHut: {
                springConstant: 0.04,
                springLength: 600,
                gravitationalConstant: -50000
            },
            solver:'barnesHut'
        },
        interaction:{
            hover: true
        },
    };
    if(response == null){

    }
    var vuln_data = {
        nodes: new vis.DataSet([]),
        edges: new vis.DataSet([])
    }
    var vuln_RootNode = {id:0, label:RepoName, size:65, group: 0 };
    vuln_data.nodes.add(vuln_RootNode);
    var vuln_container = document.getElementById('vulnerability_network');
    var vuln_network = new vis.Network(vuln_container, vuln_data, vuln_options);
    if(response != null){
        var vuln_snapshots = constructVulnerabilityGraph();
        for(var i=0; i<vuln_snapshots.length;i++){
            vuln_network.body.data.nodes.add(vuln_snapshots[i].nodes);
            vuln_network.body.data.edges.add(vuln_snapshots[i].edges);
        }
    }
}
function constructVulnerabilityGraph(){
    var Root = {name: OrgName + " " + RepoName, children:[], isFile: false, isLCA: true, groupID: 0};
    var Snapshots = [];
    var Nodes = [];
    Nodes.push(false);
    var RootNode = {id:0, label:Root.name, group:0, size:65};
    var GraphSubset = {
        nodes: [],
        edges: []
    }
    getVulnerabilityPathTree(Root, Nodes);
    VulnerabilityAdaptedDFS(Root, GraphSubset, RootNode.id, Nodes);
    Snapshots.push(GraphSubset);
    var GraphSubset = {
        nodes: [],
        edges: []
    }
    return Snapshots;
}
function VulnerabilityAdaptedDFS(Root, GraphSubset, lastLCAId, Nodes){
    var children = Root.children;
    if(children.length == 0){
        return;
    }
    for(var i=0; i<children.length;i++){
        if(children[i].isLCA){
            if(Nodes[children[i].nodeId ]==false){
                var tempNode = {id:children[i].nodeId, 
                                label: ".../" + children[i].name, 
                                size:40};
                Nodes[children[i].nodeId]=true;
                GraphSubset.nodes.push(tempNode);
                GraphSubset.edges.push({from:lastLCAId, to:tempNode.id});
            }
            VulnerabilityAdaptedDFS(children[i], GraphSubset, children[i].nodeId, Nodes);
        }
        else if(children[i].isFile){
            if(Nodes[children[i].nodeId]==false){
                var tempNode = {id:children[i].nodeId, 
                                label: children[i].name,
                                title: children[i].title, 
                };
                Nodes[children[i].nodeId]=true;
                GraphSubset.nodes.push(tempNode);
                GraphSubset.edges.push({from:lastLCAId, to:tempNode.id});
                var totalGreen = 0;
                var totalBlue = 0;
                for(var j=0; j<children[i].vulnerabilities.length; j++){
                    var score = 0;
                    if(children[i].vulnerabilities[j].severityLevel.toLowerCase() == 'high'){
                        score = 8;
                    }
                    if(children[i].vulnerabilities[j].severityLevel.toLowerCase() == 'moderate' || children[i].vulnerabilities[j].severityLevel.toLowerCase() == 'medium'){
                        score = 4.5;
                    }
                    if(children[i].vulnerabilities[j].severityLevel.toLowerCase() == 'low'){
                        score = 2;
                    }
                    var green = 255 - 25.5*score;
                    var blue = 255 - 25.5*score;
                    totalGreen += green;
                    totalBlue += blue;
                    var vulnNode = {
                        id:children[i].vulnerabilities[j].nodeId, 
                        label: children[i].vulnerabilities[j].name,
                        title: children[i].vulnerabilities[j].title, 
                        color: {
                            background:'rgba(255,'+green+','+blue+',1)',
                            border: 'rgba(255,'+green+','+blue+',1)'
                        }
                    };
                    Nodes[children[i].nodeId]=true;
                    GraphSubset.nodes.push(vulnNode);
                    GraphSubset.edges.push({from:tempNode.id, to: vulnNode.id, length: 1});
                }
                totalGreen = totalGreen/children[i].vulnerabilities.length;
                totalBlue = totalBlue/children[i].vulnerabilities.length;
                tempNode.color = {
                    background: 'rgba(255,'+totalGreen+','+totalBlue+',1)',
                    border: 'rgba(255,'+green+','+blue+',1)'
                }
            }
            VulnerabilityAdaptedDFS(children[i], GraphSubset, lastLCAId, Nodes);
        }
        else{
            VulnerabilityAdaptedDFS(children[i], GraphSubset, lastLCAId, Nodes);
        }  
    }
}
function getVulnerabilityPathTree(Root, Nodes){
    var Dependencies = VulnerabilityData.dependencies
    var i;
    var nodeid=Nodes.length;
    for(i=0;i<Dependencies.length;i++){
        var nextNode = Root;
        var prevNode;
        var NodeArr = Dependencies[i].filePath.split("\\");
        var j=0;
        while(nextNode != null){
            prevNode = nextNode;
            nextNode = nextNode.children.find(childNode => childNode.name == NodeArr[j]);
            j++;
        }

        j=j-1;
        nextNode = prevNode;
        if(j == NodeArr.length){
            continue;
        }
        nextNode.isLCA = true;
        nextNode.groupID = nextNode.nodeId;
        for(j; j< NodeArr.length; j++){
            var tempNode;
            if(j== NodeArr.length-1){
                tempNode = {name: NodeArr[j], 
                            children:[],
                            vulnerabilities: getVulnerabilities(Dependencies[i].vulnerabilities, nodeid + 1), 
                            isFile: true,
                            nodeId: nodeid,
                            isLCA: false
                        };
                nodeid+= tempNode.vulnerabilities.length + 1;
            }
            else if(j== NodeArr.length-2){
                tempNode = {name: NodeArr[j], nodeId: nodeid, children:[], isFile: false, isLCA: true, groupID:nodeid};
                nodeid++;
            }
            else{
                tempNode = {name: NodeArr[j], nodeId: nodeid, children:[], isFile: false, isLCA: false};
                nodeid++;
            }
            nextNode.children.push(tempNode);
            Nodes.push(false);
            nextNode = tempNode;
        }
    }
}
function getVulnerabilities(vulnerabilities, nodeid){
    var vulnerabilityNodes = [];
    if(vulnerabilities){
        for(var i=0; i< vulnerabilities.length; i++){
            var severity;
            if(vulnerabilities[i].cvssv3){
                severity = vulnerabilities[i].cvssv3['baseSeverity>'];
            }
            else if(vulnerabilities[i].cvssv2){
                severity = vulnerabilities[i].cvssv2.severity;
            }
            vulnerabilityNodes.push({
                name: vulnerabilities[i].name,
                nodeId: nodeid,
                title: getVulnerabilityNodeTitle(vulnerabilities[i]),
                severityLevel: severity
            });
            nodeid++;
        }
    }
    return vulnerabilityNodes
}
function getVulnerabilityNodeTitle(vulnerability){
    var vulnerabilityString ='';
    if(vulnerability.name)
        vulnerabilityString += '<p>  <br> Name: '+ vulnerability.name + '</br>';
    if(vulnerability.source)
        vulnerabilityString += '<br> Source: '+ vulnerability.source + '</br>';
    if(vulnerability.cvssv3){
        vulnerabilityString += '<br> Severity: '+ vulnerability.cvssv3['baseSeverity>'] + '</br>';
    }
    else if(vulnerability.cvssv2)
        vulnerabilityString += '<br> Severity: '+ vulnerability.cvssv2.severity + '</br>';
    return vulnerabilityString += '</p>';
}